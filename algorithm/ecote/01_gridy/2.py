''' 곱하기 혹은 더하기
각 자리가 숫자(0~9)로만 이루어진 문자열 S가 주어졌을 때,
왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며
숫자 사이에 'x' 혹은 '+' 연산자를 넣어
결과적으로 만들 수 있는 가장 큰 수 구하기

단, +보다 x를 먼저 계산하는 일반적인 방식과 달리,
모든 연산은 왼쪽에서부터 순서대로

ex) 02984 : ((((0+2)x9)x8)x4) = 576
    567 -> 210

시간 제한 1초, 메모리 제한 128MB

입력 조건: (1 <= S길이 <= 20)
    만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 하는 입력

- 내 아이디어
    피연산자 중 하나라도 0 or 1이면 +
    (;둘다 2이하)
    아니면 x

    - 그리디 정당성 : 
        피연산자 둘 다 0 or 1이 아니면 
        더하기 보다 곱하기가 더 빠르게 증가
'''

n = input()
# len = len(n)
curr = int(n[0])
# n = int(n)
# curr_pos = 10*(len


for i in range(1, len(n)):
    right = int(n[i])
    
    if (curr < 2) or (right < 2):
        curr = curr + right
    else:
        curr = curr * right

print(curr)